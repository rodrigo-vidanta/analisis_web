#!/bin/bash
# ============================================================================
# INICIO R√ÅPIDO - MIGRACI√ìN RAILWAY ‚Üí AWS
# ============================================================================
# Script para ejecutar toda la configuraci√≥n y migraci√≥n de manera autom√°tica

set -e

# Colores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

print_colored() {
    local color=$1
    local message=$2
    echo -e "${!color}${message}${NC}"
}

print_banner() {
    print_colored "PURPLE" "
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë    üöÄ MIGRACI√ìN RAILWAY ‚Üí AWS CON CURSOR AI                  ‚ïë
‚ïë                                                              ‚ïë
‚ïë    Sistema autom√°tico de migraci√≥n completa                  ‚ïë
‚ïë    Powered by: AWS CLI + Cursor + Python                     ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"
}

show_menu() {
    print_colored "CYAN" "\nüìã OPCIONES DISPONIBLES:"
    print_colored "CYAN" "1. üîß Configuraci√≥n inicial completa"
    print_colored "CYAN" "2. üîç Verificar configuraci√≥n actual"
    print_colored "CYAN" "3. üéÆ Modo interactivo (recomendado)"
    print_colored "CYAN" "4. üß™ Dry run - Simular migraci√≥n completa"
    print_colored "CYAN" "5. üöÄ Ejecutar migraci√≥n completa"
    print_colored "CYAN" "6. üìä Ver estado de recursos AWS"
    print_colored "CYAN" "7. üóëÔ∏è  Limpieza de emergencia"
    print_colored "CYAN" "8. üìñ Mostrar documentaci√≥n"
    print_colored "CYAN" "9. üö™ Salir"
    echo
}

setup_environment() {
    print_colored "BLUE" "\nüîß Ejecutando configuraci√≥n inicial..."
    
    if [[ -f "./setup-aws-environment.sh" ]]; then
        chmod +x ./setup-aws-environment.sh
        ./setup-aws-environment.sh
    else
        print_colored "RED" "‚ùå Error: setup-aws-environment.sh no encontrado"
        return 1
    fi
    
    print_colored "GREEN" "‚úÖ Configuraci√≥n inicial completada"
}

verify_setup() {
    print_colored "BLUE" "\nüîç Verificando configuraci√≥n..."
    
    # Verificar AWS CLI
    if command -v aws >/dev/null 2>&1; then
        print_colored "GREEN" "‚úÖ AWS CLI instalado"
        
        if aws sts get-caller-identity >/dev/null 2>&1; then
            IDENTITY=$(aws sts get-caller-identity)
            USER_ARN=$(echo $IDENTITY | jq -r '.Arn' 2>/dev/null || echo "Usuario AWS")
            print_colored "GREEN" "‚úÖ Credenciales configuradas: $USER_ARN"
        else
            print_colored "RED" "‚ùå Credenciales AWS no configuradas"
            return 1
        fi
    else
        print_colored "RED" "‚ùå AWS CLI no instalado"
        return 1
    fi
    
    # Verificar Python
    if command -v python3 >/dev/null 2>&1; then
        print_colored "GREEN" "‚úÖ Python3 disponible"
        
        if python3 -c "import yaml, boto3" 2>/dev/null; then
            print_colored "GREEN" "‚úÖ Dependencias Python instaladas"
        else
            print_colored "YELLOW" "‚ö†Ô∏è  Instalando dependencias Python..."
            pip3 install --user pyyaml boto3 requests
        fi
    else
        print_colored "RED" "‚ùå Python3 no encontrado"
        return 1
    fi
    
    # Verificar archivos
    local required_files=("migration-control.yaml" "migration-controller.py" ".cursorrules")
    for file in "${required_files[@]}"; do
        if [[ -f "$file" ]]; then
            print_colored "GREEN" "‚úÖ $file presente"
        else
            print_colored "RED" "‚ùå $file no encontrado"
            return 1
        fi
    done
    
    # Verificar base de conocimiento
    if [[ -d "aws-knowledge-base" ]]; then
        KB_FILES=$(ls aws-knowledge-base/*.txt 2>/dev/null | wc -l)
        print_colored "GREEN" "‚úÖ Base de conocimiento AWS ($KB_FILES archivos)"
    else
        print_colored "YELLOW" "‚ö†Ô∏è  Base de conocimiento no encontrada"
    fi
    
    print_colored "GREEN" "\n‚úÖ Verificaci√≥n completada exitosamente"
}

interactive_mode() {
    print_colored "BLUE" "\nüéÆ Iniciando modo interactivo..."
    
    if [[ -f "./migration-controller.py" ]]; then
        python3 ./migration-controller.py --interactive
    else
        print_colored "RED" "‚ùå Error: migration-controller.py no encontrado"
        return 1
    fi
}

dry_run_migration() {
    print_colored "BLUE" "\nüß™ Ejecutando simulaci√≥n de migraci√≥n completa..."
    print_colored "YELLOW" "‚ö†Ô∏è  Esto NO crear√° recursos reales en AWS"
    
    read -p "¬øContinuar con dry run? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        python3 ./migration-controller.py --full --dry-run
    else
        print_colored "CYAN" "‚è≠Ô∏è  Dry run cancelado"
    fi
}

full_migration() {
    print_colored "RED" "\nüöÄ MIGRACI√ìN COMPLETA - ESTO CREAR√Å RECURSOS REALES EN AWS"
    print_colored "YELLOW" "‚ö†Ô∏è  Esta operaci√≥n:"
    print_colored "YELLOW" "   - Crear√° recursos en AWS que generar√°n costos"
    print_colored "YELLOW" "   - Modificar√° tu infraestructura actual"
    print_colored "YELLOW" "   - Puede tomar 2-4 horas en completarse"
    
    print_colored "CYAN" "\nüí° Recomendaci√≥n: Ejecuta primero un dry run (opci√≥n 4)"
    
    read -p "¬øEst√°s seguro de continuar? Escribe 'MIGRATE' para confirmar: " confirm
    
    if [ "$confirm" = "MIGRATE" ]; then
        print_colored "GREEN" "üöÄ Iniciando migraci√≥n completa..."
        python3 ./migration-controller.py --full
    else
        print_colored "CYAN" "‚è≠Ô∏è  Migraci√≥n cancelada"
    fi
}

check_resources() {
    print_colored "BLUE" "\nüìä Verificando recursos AWS..."
    
    if [[ -f "./check-aws-resources.sh" ]]; then
        chmod +x ./check-aws-resources.sh
        ./check-aws-resources.sh
    else
        print_colored "YELLOW" "‚ö†Ô∏è  Script de verificaci√≥n no encontrado, usando comandos b√°sicos..."
        
        echo -e "\nüîê Identidad AWS:"
        aws sts get-caller-identity 2>/dev/null || print_colored "RED" "‚ùå Error obteniendo identidad"
        
        echo -e "\nüåê VPCs:"
        aws ec2 describe-vpcs --query 'Vpcs[*].[VpcId,CidrBlock,State]' --output table 2>/dev/null || print_colored "RED" "‚ùå Error listando VPCs"
        
        echo -e "\nüñ•Ô∏è  ECS Clusters:"
        aws ecs list-clusters --query 'clusterArns' --output table 2>/dev/null || print_colored "RED" "‚ùå Error listando clusters ECS"
        
        echo -e "\nüóÑÔ∏è  RDS Instances:"
        aws rds describe-db-instances --query 'DBInstances[*].[DBInstanceIdentifier,DBInstanceStatus]' --output table 2>/dev/null || print_colored "RED" "‚ùå Error listando RDS"
    fi
}

emergency_cleanup() {
    print_colored "RED" "\nüóëÔ∏è  LIMPIEZA DE EMERGENCIA"
    print_colored "RED" "‚ö†Ô∏è  ESTO ELIMINAR√Å TODOS LOS RECURSOS CREADOS"
    print_colored "YELLOW" "Esta operaci√≥n:"
    print_colored "YELLOW" "   - Eliminar√° servicios ECS"
    print_colored "YELLOW" "   - Eliminar√° instancias RDS"
    print_colored "YELLOW" "   - Eliminar√° clusters ElastiCache"
    print_colored "YELLOW" "   - Eliminar√° Load Balancers"
    print_colored "YELLOW" "   - NO se puede deshacer"
    
    read -p "¬øEst√°s seguro? Escribe 'DELETE' para confirmar: " confirm
    
    if [ "$confirm" = "DELETE" ]; then
        if [[ -f "./cleanup-aws-resources.sh" ]]; then
            chmod +x ./cleanup-aws-resources.sh
            ./cleanup-aws-resources.sh
        else
            print_colored "RED" "‚ùå Script de limpieza no encontrado"
        fi
    else
        print_colored "CYAN" "‚è≠Ô∏è  Limpieza cancelada"
    fi
}

show_documentation() {
    print_colored "BLUE" "\nüìñ DOCUMENTACI√ìN Y RECURSOS"
    print_colored "CYAN" "
üìÅ Archivos principales:
   - migration-control.yaml    : Plan maestro de migraci√≥n
   - migration-controller.py   : Controlador autom√°tico
   - setup-aws-environment.sh  : Configuraci√≥n inicial
   - README.md                 : Documentaci√≥n completa

üìö Base de conocimiento AWS:
   - aws-knowledge-base/       : Documentaci√≥n AWS CLI
   - templates/                : Plantillas de configuraci√≥n

üéØ Configuraci√≥n Cursor:
   - .cursorrules              : Reglas para Cursor AI
   - cursor-context.md         : Contexto del proyecto

üí° Comandos √∫tiles:
   aws sts get-caller-identity              # Verificar credenciales
   python3 migration-controller.py --help  # Ver opciones
   ./check-aws-resources.sh                # Ver recursos AWS
   
üìä Monitoreo:
   - CloudWatch Dashboard: migration-dashboard
   - Logs: /ecs/n8n, /ecs/n8n-worker
   - M√©tricas: CPU, Memoria, Conexiones DB
"
    
    if [[ -f "README.md" ]]; then
        print_colored "CYAN" "\nüìÑ Para documentaci√≥n completa, ver README.md"
    fi
}

main() {
    print_banner
    
    while true; do
        show_menu
        read -p "Selecciona una opci√≥n (1-9): " choice
        
        case $choice in
            1)
                setup_environment
                ;;
            2)
                verify_setup
                ;;
            3)
                interactive_mode
                ;;
            4)
                dry_run_migration
                ;;
            5)
                full_migration
                ;;
            6)
                check_resources
                ;;
            7)
                emergency_cleanup
                ;;
            8)
                show_documentation
                ;;
            9)
                print_colored "GREEN" "\nüëã ¬°Hasta luego! Migraci√≥n exitosa üöÄ"
                exit 0
                ;;
            *)
                print_colored "RED" "‚ùå Opci√≥n inv√°lida. Por favor selecciona 1-9."
                ;;
        esac
        
        print_colored "YELLOW" "\n‚è∏Ô∏è  Presiona Enter para continuar..."
        read
    done
}

# Verificar si estamos en el directorio correcto
if [[ ! -f "migration-control.yaml" ]]; then
    print_colored "RED" "‚ùå Error: No se encontr√≥ migration-control.yaml"
    print_colored "YELLOW" "üí° Aseg√∫rate de ejecutar este script desde el directorio del proyecto"
    exit 1
fi

# Ejecutar funci√≥n principal
main
